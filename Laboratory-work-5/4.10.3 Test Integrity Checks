## Перевірка цілісності тесту
| ID |
|---|
|WSTG-BUSL-03|

### Короткі відомості
Багато програм розроблено для відображення різних полів залежно від ситуації користувача, залишаючи деякі введення прихованими. Однак у багатьох випадках можна надіслати значення прихованих полів на сервер за допомогою проксі. У цих випадках елементи керування на стороні сервера мають бути достатньо розумними, щоб виконувати реляційні або серверні редагування, щоб гарантувати, що належні дані доступні серверу на основі бізнес-логіки користувача та програми.

Крім того, програма не повинна залежати від нередагованих елементів керування, спадних меню або прихованих полів для обробки бізнес-логіки, оскільки ці поля залишаються нередагованими лише в контексті браузерів. Користувачі можуть редагувати свої значення за допомогою інструментів проксі-редактора та намагатися маніпулювати бізнес-логікою. Якщо програма надає значення, пов’язані з бізнес-правилами, наприклад кількість тощо, як поля, які не можна редагувати, вона повинна підтримувати копію на стороні сервера та використовувати її для обробки бізнес-логіки. Нарешті, окрім даних програми/системи, системи журналів повинні бути захищені, щоб запобігти читанню, запису та оновленню.

Уразливості перевірки цілісності бізнес-логіки унікальні тим, що ці випадки неправильного використання стосуються конкретної програми, і якщо користувачі можуть вносити зміни, вони повинні мати можливість лише писати або оновлювати/редагувати певні артефакти в певний час відповідно до логіки бізнес-процесу.

Програма має бути достатньо розумною, щоб перевіряти наявність реляційних змін і не дозволяти користувачам надсилати інформацію безпосередньо на сервер, яка є недійсною, надійною, оскільки вона надійшла з елементів керування, які не можна редагувати, або користувач не має права надсилати через інтерфейс. Крім того, системні артефакти, такі як журнали, повинні бути «захищені» від неавторизованого читання, запису та видалення.

### Приклад 1
Уявіть програму ASP.NET з графічним інтерфейсом користувача, яка дозволяє лише адміністратору змінювати пароль для інших користувачів у системі. Користувач адміністратора бачитиме поля імені користувача та пароля для введення імені користувача та пароля, тоді як інші користувачі не бачитимуть жодного поля. Однак, якщо користувач без прав адміністратора надсилає інформацію в поле імені користувача та пароля через проксі-сервер, він може «обдурити» сервер, змусивши повірити, що запит надійшов від користувача адміністратора, і змінити пароль інших користувачів.

### Приклад 2
Більшість веб-додатків мають розкривні списки, які дозволяють користувачеві швидко вибрати свій стан, місяць народження тощо. Припустімо, програма керування проектами дозволяє користувачам увійти та, залежно від їхніх привілеїв, надає їм розкривний список проектів, до яких вони мають доступ до. Що станеться, якщо зловмисник знайде назву іншого проекту, до якого він не повинен мати доступу, і надішле інформацію через проксі. Чи надасть додаток доступ до проекту? Вони не повинні мати доступу, навіть якщо вони пропустили перевірку бізнес-логіки авторизації.

### Приклад 3
Припустімо, що система управління транспортними засобами вимагає від службовця спочатку перевірити документацію та інформацію кожного громадянина, коли вони видають посвідчення особи або водійські права. На цьому етапі бізнес-процес створив дані з високим рівнем цілісності, оскільки цілісність надісланих даних перевіряється програмою. Тепер припустімо, що програму переміщено в Інтернет, щоб працівники могли увійти в систему для повного обслуговування або громадяни могли увійти в систему зі скороченим додатком самообслуговування для оновлення певної інформації. У цей момент зловмисник може використовувати проксі-сервер-перехоплювач, щоб додати або оновити дані, до яких він не повинен мати доступу, і він може порушити цілісність даних, заявивши, що громадянин не був одружений, але надасть дані для імені чоловіка.

### Приклад 4
Багато систем включають журналювання з метою аудиту та усунення несправностей. Але наскільки якісною/дійсною є інформація в цих журналах? Чи можуть зловмисники навмисно чи випадково маніпулювати ними, порушуючи їх цілісність?

### Цілі тесту
- Перегляньте проектну документацію щодо компонентів системи, які переміщують, зберігають або обробляють дані.
- Визначте, який тип даних є логічно прийнятним для компонента та від яких типів система має захиститися.
- Визначте, кому слід дозволити змінювати або читати дані в кожному компоненті.
- Спробуйте вставити, оновити або видалити значення даних, які використовуються кожним компонентом, які не повинні бути дозволені робочим процесом бізнес-логіки.
### Як тестувати
#### Спеціальний метод тестування 1
- Використання проксі-сервера перехоплює HTTP-трафік у пошуках прихованих полів.
- Якщо знайдено приховане поле, подивіться, як ці поля порівнюються з програмою GUI, і почніть опитувати це значення через проксі, надсилаючи різні значення даних, намагаючись обійти бізнес-процес і маніпулювати значеннями, до яких ви не мали доступу.
#### Спеціальний метод тестування 2
- Використання проксі-сервера захоплює HTTP-трафік у пошуках місця для вставки інформації в області програми, які не можна редагувати.
- Якщо його знайдено, подивіться, як ці поля порівнюють із програмою GUI, і почніть запитувати це значення через проксі, надсилаючи різні значення даних, намагаючись обійти бізнес-процес і маніпулювати значеннями, до яких ви не мали доступу.
#### Спеціальний метод тестування 3
- Перелічіть компоненти програми чи системи, на які може вплинути, наприклад журнали чи бази даних.
- Спробуйте прочитати, відредагувати або видалити інформацію про кожен ідентифікований компонент. Наприклад, слід ідентифікувати файли журналу, а тестувальники повинні спробувати маніпулювати даними/інформацією, що збираються.
### Пов’язані тестові випадки
Усі тестові випадки перевірки вхідних даних.

### Запобігання проблемі
Додаток має дотримуватися суворого контролю доступу щодо того, як дані та артефакти можна змінювати та читати, а також через надійні канали, які забезпечують цілісність даних. Необхідно налаштувати належне ведення журналу, щоб перевірити та переконатися, що не відбувається несанкціонованого доступу чи модифікації.
